一、项目模块相关的介绍
	文章模块
		路由
		 	1.路由 			文章路由：文章列表、添加文章、编辑文章、删除文章、文章详情
				laravel路由的几种形式     			  增量更新资源  查询资源支持哪些方法
		 			1.http 方法	Route::get/post/put/patch/delete/options（$url , $callback);
		 			2.路由参数	Route::get('user/{id}', function ($id){ return 'User'.$id; })
		 			3.路由分组	路由分组是将路由中多次出现的访问标识进行一个分组 默认会访问组名(标识)
		 				Route::group(['prefix' => 'posts'],function(){
		 					Route::get('/{id}',)
		 				})
		 			4.绑定模型	将路由绑定给模型 直接去找模型的方法 可以减少代码
		 				Route::get('api/users/{user}',function(App\User $user){
		 					return $user->email;
		 				})

		 			支持所有的路由 可以Route::any
		 			支持get与post 可以Route::match(['get','post'],);
		 			注意：因为form表达只支持get post 如果想做修改 需要将 from action='post' 内
		 				input name="_method" value="PUT" 就能访问到Route为put 等价于 {{method_filed("PUT")}}

		 			路由地址 routes/web.php
		 			路由写法 Route::get('/posts','\App\Http\Controllers\PostController@index');
		 								url访问		[控制器需要带命名空间]@[行为]

		 	2.命令行创建控制器的便捷方法
		 		cd /laravel/..php artisan..有..make controller
		 		php artisan help make:controller..可以查看关于make controller的相关说明
		 		localhost:laravel54 googol$ php artisan make:controller PostController 创建控制器

		 	3.文章模板的页面渲染
		 		return view('视图文件夹/模块名',第二个参数是数据值array类型);
		 			第二个传至也可以是compact

		 	4.模板
		 	    将样式文件都放置在public中  样式中只需要添加 '/'
		 		使用的是blade模板
		 		模板语法{{}}		@if @endif		@foreach $endforeach
		 		参数传递 //$posts[] $arr[]   compact('posts','arr');
		 		继承模型 extension/ section/ yield/ content
		 		引入视图 include

		 		文章模块的页面模板调整（使用继承）
                    找到页面模板公共的部分
                    创建views/layout/main.blode.php写入公共的视图文件 将非公共的区域使用 yield('这里的字符串将会引入活动的页面')
                    在正式的页面需要将公共的内容剥离 只留下动态的数据页面 在顶部写入
                        @extends("layuot.main")
                        用
                        @section("content")    活动页面    @endsection 结构 就可以使用公共的页面 提高了代码的复用率



		表设计
			1.表设计
			    使用migration创建posts数据表
			    laravel中建议表名及先关的字段都遵守建议的标准名称
			        比如：posts 表名、 user_id 外键、 created_at / updated_at 创建与修改字段
			    创建命令使用如下
			        localhost:laravel54 googol$ php artisan help make:migration
                    localhost:laravel54 googol$ php artisan make:migration create_posts_table
                        create_posts_table 是创建 posts 表的格式
                        执行是 php artisan migration
                        回滚是 php artisan migrate:rollback

                    localhost:laravel54 googol$ php artisan migrate
                        5.4唯一出现的问题
                       In Connection.php line 647:
                         SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key lengt
                         h is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))

                       In Connection.php line 449:
                         SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key lengt
                         h is 767 bytes

                    解决办法
                        在 app/Providers/AppServicePriders.php 中的 boot方法是在ServicePrider启动之后    register 是在启动之前
                        public function boot()
                        {
                            //mb4string 类型 每个占位4bytes; 767/4
                            Schema::defaultStringLength(191);
                        }
                    输入 localhost:laravel54 googol$ php artisan migrate     就可生成数据表
			
            2.模型
			    使用ORM创建文章模块模型
			    ORM
			        什么是ORM是一个class对应一个表 使用这个类完成对于数据库的操作
			    创建posts的模型
			        模型放置的位置 /app/Http/
			        如果表与模型名称不一，需要定义 protected $table = "表名定义";
			    tinker 的使用
			        tinker是一款和应用程序的插件
			        启动  localhost:laravel54 googol$ php artisan tinker      显示的是shell脚本
                    在创建完成模型之后检测模型中的方法 可以使用tinker 无需再让控制器去调用
                    写法
                       Psy Shell v0.9.6 (PHP 7.1.7 — cli) by Justin Hileman
                       >>> $post = new \App\Posts();
                       => App\Posts {#2806}
                       >>> $post->title = "this is post1";
                       => "this is post1"
                       >>> $post->content = 'this is content1';
                       => "this is content1"
                       >>> $post->save();
                       => true                  《== 查看数据库 是否有值

                    问题：在创建之后 这里会有一个时区的问题(默认是英国的时区 需要将其设置为中国的时区 设置办法如下)
                        /config/app.php  》 'timezone' => 'UTC', 等价于原生的 date_default_timezone_set
                        设置为 Asia/Shanghai; 最后需要将tinker关闭 重启 方可修改时区信息

                Tinker的基本的增删改查
                    增：
                        >>> $post = new \App\Posts();
                        => App\Posts {#2806}
                        >>> $post->title = "this is post1";
                        => "this is post1"
                        >>> $post->content = 'this is content1';
                        => "this is content1"
                        >>> $post->save();
                        => true

                    删：
                        >>> $post = \App\Posts::find(3);
                        => App\Posts {#2801
                             id: 3,
                             title: "this is post1",
                             content: "this is content1",
                             user_id: 0,
                             created_at: "2018-07-24 23:05:04",
                             updated_at: "2018-07-24 23:05:04",
                           }
                        >>> $post->delete();
                        => true

                    改：
                        >>> $post = \App\Posts::find(2);
                        => App\Posts {#2812
                             id: 2,
                             title: "this is post1",
                             content: "this is content1",
                             user_id: 0,
                             created_at: "2018-07-24 15:04:21",
                             updated_at: "2018-07-24 15:04:21",
                           }
                        >>> $post->title = '修改数据';
                        => "修改数据"
                        >>> $post->save();
                        => true

                    查：
                        >>> \App\Posts::find(2);
                        => App\Posts {#2809
                             id: 2,
                             title: "this is post1",
                             content: "this is content1",
                             user_id: 0,
                             created_at: "2018-07-24 15:04:21",
                             updated_at: "2018-07-24 15:04:21",
                           }

                        >>> \App\Posts::where('title','this is post1')->first();
                        => App\Posts {#2799
                             id: 1,
                             title: "this is post1",
                             content: "this is content1",
                             user_id: 0,
                             created_at: "2018-07-24 14:57:40",
                             updated_at: "2018-07-24 14:57:40",
                           }

                        >>> \App\Posts::where('title','this is post1')->get();
                        => Illuminate\Database\Eloquent\Collection {#2811
                             all: [
                               App\Posts {#2801
                                 id: 1,
                                 title: "this is post1",
                                 content: "this is content1",
                                 user_id: 0,
                                 created_at: "2018-07-24 14:57:40",
                                 updated_at: "2018-07-24 14:57:40",
                               },
                                   ..... 省略 .....
                             ],
                           }
                        >>>





		页面逻辑
			1.文章列表

			    逻辑实现
			        模型查找
                        $posts = Posts::orderBy('created_at','desc')->get();
			        页面渲染
                        return view('post/index',compact('posts'));
			        时间格式
			            将 2018-07-24 15:04:21 转换为 Jul 24, 2018 以下是转换方式
			            \\{{$value->created_at}} 是一个对象,显示的时间不是正确时区的时间
                        https://carbon.nesbot.com/docs/
                        Carbon类继承自PHP DateTime类。
			        数据填充
                        https://github.com/fzaninotto/Faker
                        填充的实现流程
                            1. 在 database/factories/ModelFactory.php 工厂中设置
                                $factory->define(App\Posts::class, function (Faker\Generator $faker){
                                    return [
                                        'title' => $faker->sentence(6),     // 长度
                                        'content'=>$faker->paragraph(10),  // 10个句子
                                    ];
                                });

                                https://github.com/fzaninotto/Faker 中找方法
                                需要注意的是 每次修改完文本文件内容 必须重新启动 tinker

                            2. 生成 + 入库
                                >>> factory(App\Posts::class, 10)->make();  // 生成
                                >>> factory(App\Posts::class, 20)->create();// 入库

			        字符截断 + 分页
                        $posts = Posts::orderBy('created_at','desc')->paginate(6); 分页控制器
                        {{$posts->link()}}       // 前端显示页码

                        字符截断：对于页面内容显示过长 可以 {{str_limit($values->content,长度,'超过长度显示的内容')}}

            2.添加文章 csrf + 富文本编辑器创建文章
                控制器、csrf、保存model、
                    csrf:input+hidden+_toker+{{csrf_token()}}
                         {{csrf_field()}}
                    打印结果 dd(\Request::all())   ||    dd(request())     ||     dd(request('字段'))
                    代码实例
                        $params = \request(['title','content']);        // 使用create数组添加数据 需要在模型层去配置对应的属性
                        Posts::create($params);
                        return redirect('/posts');

                    使用create创建model的写法
                        <?php  model.php
                        namespace App;
                        use Illuminate\Database\Eloquent\Model as BaseModel;
                        class Model extends BaseModel
                        {
                        //    protected $guarded;    // create 方式不可以注入的字段 当 $guarded=[] 时表示允许所有的字段添加
                        //    protected $fillable;     // 可以注入的字段
                        //    protected $fillable = ['title','content'];
                            protected $guarded = [];
                        }

                        <?php posts.php
                        namespace App;
                        use App\Model;
                        class Posts extends Model
                        {
                        }

                验证和错误提示、错误提示本地化
                    表单提交的三个步骤： 1、验证      2、逻辑      3、跳转
                    C:
                        $this->validate(request(),[
                            '字段' => '规则|规则'
                        ]);
                        $this->validate(request(),[
                            '字段' => '规则|规则'
                        ],[
                            '条件:字段' => '返回的数据'
                        ]);
                    V:
                        @if(cunt($errors) > 0)
                            div class="alert alert-danger"
                                @foreach $errors->all() as $error
                                    li
                                        {{$error}}
                                    li
                                @endforeach
                            div
                        @endif
                    V:使用了富文本编辑器之后存储会以 HTML 格式存储,所以展示页面可以用 {!! !!} 来视图展示

            3.文件上传
                使用wangeditor编辑器，首先样式模板等都调整完毕，之后将创建路由规则，因为上传文件也需要csrf的保护，所以在meta标签中附带csrf的值
                其次在laravel上传文件中 文件系统配置文件位于 config/filesystems.php 当然，你可随意配置多组磁盘，即使多个磁盘使用相同的驱动。公开磁盘」就是指你的文件将可被公开访问，默认下， public 磁盘使用 local 驱动且将文件存放在 storage/app/public 目录下。为了能通过网络访问，你需要创建 public/storage 到 storage/app/public 的符号链接。这个约定能让你的可公开访问文件保持在同一个目录下，这样在不同的部署系统间就可以轻松共享，如 Envoyer 的“不停服”部署系统。你可以使用 storage:link Artisan 命令创建符号链接：
                    public function upload(Request $request)
                    {
                        $path = $request->file('wangEditorH5File')->storePublicly(md5(time())); // 返回文件名路径
                        return asset('storage/'.$path);     // 不但会前台会显示图片，同时也会返回图片的路径
                    }

            3.编辑文章 (修改文章)
                页面 ：首先 根据路由规则 拿路由的类 然后将编辑页面同展示详情页面 使用compact 然后渲染 修改展示页面的数据
                逻辑：

            4.删除文章
                public function delete(Posts $posts)
                {
                    $posts->delete();
                    return redirect('/posts');
                }

			5.文章详情
                使用的是模型绑定
                    Route::get('/posts/{post}','\App\Http\Controllers\PostController@show');

                详情页面 只需要在 function(post $post){ return view('post/show',compact('posts'));  }




    总结：
        路由：可以绑定模型、可以绑定参数

        模板：以blade.php结尾

        模型：如果使用 create 就需要在model使用
                    //    protected $guarded;    // create 方式不可以注入的字段 当 $guarded=[] 时表示允许所有的字段添加
                    //    protected $fillable;     // 可以注入的字段

        控制器：路由访问控制器

        数据库迁移：migration 能够与协同开发的人协同你的数据库修改

        数据填充：seed 对某个模型创建工厂 然后可以直接用thinker数据填充

        命令行：tinker 每次修改文件必须重启tinker

        分页：paging













