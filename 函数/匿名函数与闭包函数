

匿名函数与闭包函数

	匿名函数：没有函数名称的函数；
	闭包：一个可以使用另外一个函数作用域中的变量的函数。用一个专业一点的说法就是：函数调用返回后一个没有释放资源的栈区；一般，当函数执行完毕后，局部活动对象会被销毁，内存中仅保存全局作用域，但闭包的情况是不一样的。闭包的活动对象依然会保存在内存中，于是像上例中，函数调用返回后，变量i是属于活动对象里面的，就是说其栈区还没有释放，但你调用c()的时候i变量保存的作用域链从b()->a()->全局去寻找作用域var i声明所在，然后找到了var i=1;然后在闭包内++i;结果，最后输出的值就是2了；不知道这么说有没人明白，如果不明白，那么只要记住它的闭包的两个点就好了，一点就是闭包的活动对象没有被销毁；第二点是作用域链的关键是他要遇到var 声明；就好了····

		共同点：他们都有是函数；除此之外没有任何共同点；











	定义：匿名函数，也叫做闭包函数(closures)，允许 临时创建一个没有指定名称的函数。最经常用作回调函数(callback)参数的值

	使用：闭包(匿名)函数可以作为变量的值来使用
		<?php
		$example = function () {
			echo '123';
		};
		$example();		// 输出的结果是 123
		?>
		<?php
		$message = 'hello';
		$example = function () {
			echo "$message";
		};
		$example();		// 输出的结果是 未定义
		?>
		<?php
		$message = 'hello';
		$example = function () use($message) {
			echo '$message';
		};
		$example();		// 输出的结果是 hello
		?>
		<?php
		$message = 'hello';
		$example = function () use($message) {
			echo '$message';
		};
		$message = 'hi';
		$example();		// 输出的结果是 hello use传递的变量需要传在前面
		?>
		<?php
		$message = 'hello';
		$example = function () use(&$message) {
			echo '$message';
		};
		$message = 'hi';
		$example();		// 输出的结果是 hi use使用引用传递在调用的时候重新赋值的
		?>
		<?php
		$message = 'hello';
		$example = function ($name) use(&$message) {
			echo '$message'.","."$name";
		};
		$message = 'hi';
		$example('lily');		// 输出的结果是 hi,lily  use使用的必须在函数或者类的头部申明
		?>


		闭包就是能够读取其他函数内部变量的函数；匿名函数是没有函数名的函数。他们的共同点是都是函数，仅此而已。不一样的