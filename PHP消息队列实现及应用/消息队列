消息队列：就是流程的一个中间件
	消息队列是个高大上的名词，本质上就是如何进行排队处理，最长的使用场景就是发送短信的时候使用短信队列。
		但消息队列可以做的不止是这一类场景，它在解耦、消峰、异步、一致性等方面都有很大的用武之地。
		因此如何使用消息队列来处理一些特殊的业务需求，这就是下面所阐述解释的内容

	第1章 消息队列的概念、原理和场景
		应用场景：
			1 冗余 		[订单系统后续需要严格的记录和转换 订单处理程序处理 最后删除]
			2 解耦 		[订单与订单处理的系统是两个系统 互补干涉 就算一个崩溃了 另外一个还能继续工作]
			3 流量消峰	[秒杀、抢购]
			4 异步通讯	[]
			5 扩展性		[比如说订单需要财务处理 后续需要加入物流 可以直接物流接入 队列]
			6 排序保证	[按照顺序处理]

		队列介质 || 优点与缺点
			MySQL：可靠性高、易实现、			速度慢
			Redis：速度快，					单条大消息包时 效率低
			消息系统rabbitMQ：专业性强、可靠、	学习成本高

		消息队列的触发机制
			死循环方式读取：易实现，故障时无法及时恢复     =》 适合秒杀
			定时任务：每隔几秒或几分钟执行一次 这样的话压力均分，有处理量上限[需要注释距离]	=》 订单、物流配货
			创建一个监听或守护：类似于PHP—FPM和PHP-CG，需要shell基础

	第2章 解耦案例：队列处理订单系统和配送系统
		第一步：order.php 接收用户的订单信息并写入队列的操作	》 订单处理系统	
		第二步：goods.php 主要是配送系统处理队列中的订单并进行标记的一个文件	
			1. 首先要把处理的记录更新为等待处理	防止冲突 锁操作
			2. 要选择出刚刚更新的数据进行系统配送的处理
			3. 将把已经处理完成的更新为已完成
		第三步：编写shell脚本 每次处理两条数据 编写crontab每分钟进行
			总	结：首先将用户下单添加到一张订单表中,状态为0表示未处理,然后写了锁定程序,意思就是将订单状态改为2,
					防止其他执行冲突,然后Linux每分钟执行 mysql中每次取2条数据出来更新 状态为1 表示处理订单成功
				
	第3章 流量削峰案例：Redis的List类型实现秒杀
		首先将库存量添加到redis 其次每访问一次pop一个 成功的直接修改库存 失败的重新入队

	第4章 RabbitMQ：更专业的消息系统实现方案
		复杂逻辑的项目 分布式的项目
		可以实现压力的均分







			





			





			





			





			





			
