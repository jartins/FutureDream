魔术方法
	一~二：对象的属性进行接管
	五~六：对象的方法调用
	七：把PHP的对象当做函数的方式调用时
	八：	将PHP对象转成字符循环
	一、__set(属性名,属性值)
			给私有的属性设置值，本质上是因为 定义了私有的属性之后 只能在类内的方法才能够去调用(赋值、获取值)，
				虽然自己定义方法也可以解决在类外调用私有方法 但是在多个私有方法的基础上就会使代码复用率很低
				由此__set诞生，它主要解决的就是！在类外设置类内的私有属性时,不用再去定义一般的方法,
				为了代码复用高 就可以调用__set()这个魔术方法 这样就可以解决类外通过方法调用设置不同私有属性的业务了 ！
				代码如下

	二、__get(属性名)
			给私有的属性获取值，与__set相反
			示例代码如下
				class Test
				{
					private $num1 = '';
					private $num2 = '';
					function __set($var,$val){
						$this->$var = $val;
					}

					function __get($var){
						return $this->$var;
					}

				}
				$result = new Test;
				$result->num1 = '测试魔术方法';
				var_dump($result->num1);

	三、__isset()	
			私有属性是否存在，场景比喻 在类外使用isset(调用类内的静态属性)因为无法调用 
				进而打印为false 解决这一办法首先要借助方法能够调用到私有的属性 所以就产生了__isset() 
				能够自动的调用该方法
				
			代码示例
				class Test{
					private $num1 = '123';
					function __isset($val){
						return isset($this->$val)? true : false;
					}
				}
				$result = new Test;
				var_dump(isset($result->num1));
			
	四、__unset()	
			用户在删除私有属性时 unset方法就会进行一个回调
			代码示例
				class Test{
					private $num1 = 'abc';
					function __unset($val){
						echo "unset:".$val;
						unset($this->$val);
					}
				}
				$result = new Test;
				var_dump(unset($result->num1));
			
	五、__call()
			当调用的方法不存在是 就会自动调用魔术方法call call(方法名, [方法值]);
				class Test{
					function __call($func,$argument){
						echo "$func";		// 打印出方法名	go
						print_r($argument);	// 打印出数组 	1 2
					}
				}
				$result = new Test;
				$result->go('1','2');

	六、__callStatic()
			当调用的静态方法不存在 魔术方法callStatic就会被自动调用
				class Test{
					public static __callStatic($func,$argument){
						echo $func;			// 方法名
						print_r($argument);	// 数组
					}
				}	
				Test::go(1,'ok');	

	七、__invoke()
			当对象以函数的方式被调用的时候(对象当函数使用) invoke方法就会被自动调用
			代码示例
				class Test{
					function __invoke($argument){
						echo $argument;
					}
				}
				$result = new Test;
				$result('将该对象以函数的方式调用');

	八、__toString()
			当要打印对象的时候，这个方法就会被自动调用
			代码示例
				class Test{
					public function __toString(){
						echo "当打印对象的时候 自动会调用这个魔术方法 __toString()";
					}
				}
				$result = new Test;
				var_dump($result);	

	九、__clone()	
			在使用clone关键字进行一个复制行为的时候，它会自动的调用__clone()		
			
			

			

			

			

			

		

		

		

		

		
