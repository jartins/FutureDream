基本概念：
	Node 节点			Cluster 集群

	Index	（数据库 小写）
		查看当前节点的所有index 
			192:~ googol$ curl -X GET 'http://localhost:9200/_cat/indices?v'

	Document（数据库index里的单条记录，很多的Document组成了一个index）		
		tips:同一个数据库index里的Document记录，不要求有想相同的结构(scheme)，但最好保持相同 这样有利于提高搜索的效率
		示例:{
				"user": "张三",
				"title":"工程师",
				"desc":	"数据库管理"
			}

	Type	Document可以分组比如weather数据库里，可以按城市分组（北京和上海），也可以按气候分组（晴天雨阴天），这种分组就叫type，它是虚拟的逻辑分组，用来过滤Document记录
		Tips:不同的type应该有相似的schema(结构),举例来说 id 字段不能在这个这个组是字符串，在另一个组是数值。这是与关系型数据库的一个区别。性质完全不同的两个数据(比如products和logs)应该分为两个Index 而不是一个Index两个type

		列出每个Index所包含的type



始初测试：
	新建和删除Index
	curl -X PUT localhost:9200/index名称
	curl -X DELETE localhost:9200/index名称



数据操作:
	新增记录
		curl -X PUT 'localhost:9200/Index/Type/1' -d '
		{
			"name"	:	"name",
			"age"	:	"age"
		}'
		tips: 'localhost:9200/Index/Type/1' 最后的1是该条记录的id 他不一定是数字 任意字符串都可以
			新增记录时也可以不指定 id，但此时要改成POST请求 如果不指定id以POST发送请求之后添加一个记录，这时服务器返回的json对象里面 _id 就是一个随机字符串


	删除记录
		curl -X DELETE 'localhost:9200/Index/Type/1'


	修改记录
		curl -X PUT 'localhost:9200/Index/Type/1' -d '
		{
			"name":"value",
			"name":"value"
		}'


	查看记录
		curl 'localhost:9200/Index/Type/1?pretty=true'


		查看所有
			curl 'localhost:9200/Index/Type/_search'
			其中 took 		为查询所需时间(单位:毫秒)
				timed_out	为是否超时
				hits		为命中记录
				max_score	为最高匹配程度
				_score		表示匹配程度 默认是按照这个降序排列



全文检索
	curl localhost:9200/Index/type/_search -d '
	{
		"query":{"match" : {"字段" : "文字概述/关键字"}},
		"size":1,	// 显示数量
		"from":1	// 显示位置 默认从0开始
	}'

	叶子查询
		match、term、range

		match 之 or
			192:~ googol$ curl localhost:9200/cnarea_2016/cnarea_2016/_search -d '
			> {
			> "query":{"match":{"name":"第二 第三"}}	// <- 中间空格为 or或 
			> }'

		match 之 and
			

	复合查询
		bool、dis_max、constant_score



