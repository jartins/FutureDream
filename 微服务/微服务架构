什么是微服务
	微服务是一系列小服务的组合
	微服务可以单独的运行(独立的进程/process)
	微服务的构建要结合我们业务的能力
	微服务可以独立的部署
	微服务是可以集中/中心化管理(centralized management)


微服务架构
	1. 微服务粒度
		整个度量是围绕整个业务功能去拆分(比如二手交易平台 有用户体系、有商品体系、有交易体系、有搜索体系、有推荐体系。把变化是因为同一个原因的作为一个微服务，不同原因变换成不同的微服务)
	2. 独立进程
		任何微服务的开发 测试 上线 运维都可以独立的进行
	3. 围绕业务建模
		围绕业务模型去打造
	4. 轻量级的通信
		模块之间的通信是没有语言关系的	通信与平台没有关系	  
	5. 去中心化的管理
		采用不同的语言



 二手交易平台的特点和使用微服务架构的原因
 	卖卖卖
 	部分业务功能：发布商品、 分类搜索、 关键词搜索、 推荐商品、 消息中心-私信留言、 个人中心
 	项目问题：业务功能多、业务复杂性高、用户体验度好、业务高速发展
 	反应：业务块的发展对架构和架构模式提出很高要求 如果架构模式是单体模式 发展到一定情况下 肯定会受到制约 所以要采用更好更小的架构 也提高了用户体验
 	微服务架构的特点：系统高可用(进程系统都会稳定）、 系统高扩展性、 快速迭代、 持续交付



微服务架构在转转的演进
	如何设计
		整体设计
			水平分层		[业务]
			垂直业务拆分	[细节单元]

		每层设计
			微服务 - 业务单元垂直拆分
			无状态化
			独立进程、部署、运维
		
		高可用 - 冗余、自动恢复
				高可用最核心的手段就是冗余：任何的单点都是不可靠的 不论是模块还是机器都是不可靠的 所以在这层面要做多备份冗余

	架构设计之分层
		微服务网关		=》 对于长短连接的维护、用户身份校验、登录校验等... 最后将请求转发到聚合层
		微服务聚合层		=》 业务逻辑处理层   根据请求拆分成多个原子 ↓      多个原子最后发送给网关->用户 ↑
		微服务原子层		=》 	提供业务的curd接口
		微服务数据层		=》	对每个微服务 单独存在数据库中

		轻量级通信 ->HTTP RPC(比http好)
		去中心化管理 ->开发语言 java
		微服务注册
		微服务发现

	二手交易特点
		业务发展快
		业务越来越复杂
		研发人员增多
		开发瓶颈集中 - 微服务聚合层
			改进方案：多个聚合层
			改进多聚合层优点
				1 独立：进程、开发、部署、运维
				2 高效：快速迭代、持续交付

	通讯协议和服务的注册、发现
		轻量级通信协议
			1. REST (http)
			2. HAL 	(rest)[亚马逊在用国内不成熟]
			3. RPC (Thrift、gRpc、dubbo) [国内用的多]
			4. 消息队列





	









	









	









	









	









	









